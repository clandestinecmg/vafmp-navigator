== SYSTEM VERSIONS ==
node: v22.19.0
npm:  11.6.0
expo: 0.24.21
eas:  eas-cli/16.19.1 darwin-arm64 node-v22.19.0

== EXPO / TYPECHECK ==
expo config: OK
tsc: OK

== KEY DEPENDENCIES ==
vafmp-navigator@1.0.0 /Users/cmg/vafmp-navigator
├── @expo/vector-icons@14.1.0
├── @react-native-async-storage/async-storage@2.1.2
├── @tanstack/react-query@5.87.4
├── expo-router@5.1.6
├── expo@53.0.22
└── firebase@11.10.0


== PROJECT TREE (top 3 levels, core dirs only) ==
.
seed
types
app
app/(app)
app/(auth)
app/(dev)
state
styles
components
scripts
lib
assets
assets/seeds

== FILE LIST (app/, lib/, components/, styles/, seed/, assets/) ==
app/index.tsx
app/(app)/crisis.tsx
app/(app)/home.tsx
app/(app)/resources.tsx
app/(app)/favorites.tsx
app/(app)/providers.tsx
app/.DS_Store
app/error.tsx
app/_layout.tsx
app/(auth)/login.tsx
app/(dev)/debugAuth.tsx
app/(dev)/migrateMapsUrl.tsx
app/(dev)/seedProviders.tsx
app/(dev)/auditMapsUrl.tsx
app/(dev)/normalizeProviders.tsx
lib/firestore.ts
lib/displaySettings.ts
lib/firestore_admin.ts
lib/queries.ts
lib/firebase.ts
lib/favorites.ts
lib/authApi.ts
lib/utils.maps.ts
lib/onMap.ts
lib/resourcesData.ts
lib/models.ts
components/Icon.tsx
components/Background.tsx
components/FilterBar.tsx
components/ProviderCard.tsx
components/Select.tsx
components/Fallback.tsx
styles/shared.ts
seed/providers.seed.json
assets/icon.png
assets/.DS_Store
assets/icon-192.png
assets/icon-48.png
assets/favicon.png
assets/splash.png
assets/adaptive-icon.png
assets/seeds/providers_PH.json
assets/seeds/providers_KH.json
assets/seeds/providers_TH.json
assets/seeds/providers_VN.json
assets/flag-texture.png

== CONFIG ==

----- app.config.ts -----
// app.config.ts
import 'dotenv/config';
import { ExpoConfig, ConfigContext } from '@expo/config';

export default ({ config }: ConfigContext): ExpoConfig => ({
  ...config,
  name: 'vafmp-navigator',
  slug: 'vafmp-navigator',
  version: '1.0.0',
  orientation: 'portrait',
  userInterfaceStyle: 'dark',
  scheme: 'vafmp', // ✅ deep link scheme
  icon: './assets/icon.png',
  splash: {
    image: './assets/splash.png',
    resizeMode: 'contain',
    backgroundColor: '#0b1220',
  },
  updates: { fallbackToCacheTimeout: 0 },
  assetBundlePatterns: ['**/*'],

  ios: {
    supportsTablet: true,
    bundleIdentifier: 'com.yourdomain.vafmpnavigator',
  },
  android: {
    adaptiveIcon: {
      foregroundImage: './assets/adaptive-icon.png',
      backgroundColor: '#0b1220',
    },
    package: 'com.yourdomain.vafmpnavigator',
  },

  // ✅ Public runtime variables
  extra: {
    FB_API_KEY: process.env.EXPO_PUBLIC_FB_API_KEY,
    FB_AUTH_DOMAIN: process.env.EXPO_PUBLIC_FB_AUTH_DOMAIN,
    FB_PROJECT_ID: process.env.EXPO_PUBLIC_FB_PROJECT_ID,
    FB_STORAGE_BUCKET: process.env.EXPO_PUBLIC_FB_STORAGE_BUCKET,
    FB_SENDER_ID: process.env.EXPO_PUBLIC_FB_SENDER_ID,
    FB_APP_ID: process.env.EXPO_PUBLIC_FB_APP_ID,

    SENTRY_DSN: process.env.SENTRY_DSN,
    SENTRY_ORG: process.env.SENTRY_ORG,
    SENTRY_PROJECT: process.env.SENTRY_PROJECT,

    EAS_PROJECT_ID: process.env.EAS_PROJECT_ID,
    eas: { projectId: process.env.EAS_PROJECT_ID },
  },

  plugins: [
    'expo-font',
    'expo-asset',
    'expo-mail-composer',
  ],
});
----- eas.json -----
{
  "cli": {
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      },
      "ios": {
        "simulator": true
      }
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}
----- package.json -----
{
  "name": "vafmp-navigator",
  "version": "1.0.0",
  "main": "expo-router/entry",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "2.1.2",
    "@tanstack/react-query": "^5.87.1",
    "expo": "~53.0.22",
    "expo-constants": "~17.1.7",
    "expo-linking": "~7.1.7",
    "expo-router": "~5.1.5",
    "expo-secure-store": "~14.2.4",
    "expo-status-bar": "~2.2.3",
    "firebase": "^11.10.0",
    "react": "19.0.0",
    "react-native": "0.79.5",
    "sentry-expo": "~7.0.0",
    "zustand": "^5.0.8",
    "react-native-safe-area-context": "5.4.0",
    "expo-mail-composer": "~14.1.6",
    "@react-native-picker/picker": "2.11.1",
    "@expo/vector-icons": "^14.1.0",
    "expo-asset": "~11.1.7",
    "expo-font": "~13.3.2",
    "react-native-screens": "~4.11.1",
    "expo-application": "~6.1.5",
    "expo-device": "~7.1.4",
    "expo-dev-client": "~5.2.4"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/react": "~19.0.10",
    "tslib": "^2.8.1",
    "typescript": "~5.8.3"
  },
  "private": true
}

----- tsconfig.json -----
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "jsx": "react-jsx",
    "strict": true,
    "noEmit": true,
    "skipLibCheck": true,
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,

    /* Make sure our local shims are picked up */
    "typeRoots": ["./types", "./node_modules/@types"],

    /* Remove explicit expo-router types — they’re bundled */
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true
  },
  "include": ["**/*.ts", "**/*.tsx", "types/**/*.d.ts"]
}== ROUTER ENTRY ==

----- app/index.tsx -----
import { Redirect } from 'expo-router';
export default function Index() {
  return <Redirect href="/(app)/home" />;
}

----- app/_layout.tsx -----
// app/_layout.tsx
import * as React from 'react';
import { Tabs } from 'expo-router';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { colors } from '../styles/shared';

const queryClient = new QueryClient();

// Renders one invisible icon so the font is surely loaded
function FontWarmup() {
  return <MaterialIcons name="check" size={0.001} color="transparent" />;
}

export default function RootLayout() {
  return (
    <QueryClientProvider client={queryClient}>
      <FontWarmup />
      <Tabs
        screenOptions={{
          headerShown: false,
          tabBarActiveTintColor: colors.gold,   // was amber
          tabBarInactiveTintColor: colors.muted,
          tabBarStyle: { backgroundColor: colors.bg, borderTopColor: colors.border },
          tabBarLabelStyle: { fontSize: 12, fontWeight: '600' },
        }}
      >
        <Tabs.Screen
          name="(app)/home"
          options={{
            title: 'Home',
            tabBarIcon: ({ color, size }) => <MaterialIcons name="home" size={size} color={color} />,
          }}
        />
        <Tabs.Screen
          name="(app)/providers"
          options={{
            title: 'Providers',
            tabBarIcon: ({ color, size }) => <MaterialIcons name="local-hospital" size={size} color={color} />,
          }}
        />
        <Tabs.Screen
          name="(app)/favorites"
          options={{
            title: 'Favorites',
            tabBarIcon: ({ color, size }) => <MaterialIcons name="star" size={size} color={color} />,
          }}
        />
        <Tabs.Screen
          name="(app)/resources"
          options={{
            title: 'Resources',
            tabBarIcon: ({ color, size }) => <MaterialIcons name="menu-book" size={size} color={color} />,
          }}
        />
        <Tabs.Screen
          name="(app)/crisis"
          options={{
            title: 'Crisis',
            tabBarIcon: ({ color, size }) => <MaterialIcons name="health-and-safety" size={size} color={color} />,
          }}
        />
        <Tabs.Screen
          name="(auth)/login"
          options={{
            title: 'Auth',
            tabBarIcon: ({ color, size }) => <MaterialIcons name="login" size={size} color={color} />,
          }}
        />
      </Tabs>
    </QueryClientProvider>
  );
}== CORE LIB ==

----- lib/firebase.ts -----
// lib/firebase.ts
import { initializeApp } from 'firebase/app';
import { initializeFirestore, persistentLocalCache } from 'firebase/firestore';
import Constants from 'expo-constants';

const extra = Constants.expoConfig?.extra ?? {};
const firebaseConfig = {
  apiKey: extra.FB_API_KEY,
  authDomain: extra.FB_AUTH_DOMAIN,
  projectId: extra.FB_PROJECT_ID,
  storageBucket: extra.FB_STORAGE_BUCKET,
  messagingSenderId: extra.FB_SENDER_ID,
  appId: extra.FB_APP_ID,
};

export const app = initializeApp(firebaseConfig);

// Firestore with resilient cache; on RN it may warn about IndexedDB and fall back — that’s fine.
export const db = initializeFirestore(app, {
  experimentalAutoDetectLongPolling: true,
  localCache: persistentLocalCache(),
});
----- lib/authApi.ts -----
// lib/authApi.ts
// Centralized Firebase Auth wiring with RN persistence when available.

import { app } from './firebase';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  getAuth,
  initializeAuth,
  getReactNativePersistence,
  onAuthStateChanged,
  signInAnonymously,
  signOut,
  type User,
  type Unsubscribe,
} from 'firebase/auth';

/**
 * Try to initialize Auth with React Native persistence.
 * If that fails (already initialized / non-RN env), fall back to getAuth(app).
 */
let _auth: unknown;
try {
  _auth = initializeAuth(app, {
    persistence: getReactNativePersistence(AsyncStorage),
  });
} catch {
  _auth = getAuth(app);
}

// Infer the correct Auth type from getAuth's return type; no explicit Auth import needed.
const auth = _auth as ReturnType<typeof getAuth>;

// Re-export a stable surface for the rest of the app.
export { auth, onAuthStateChanged, signInAnonymously, signOut };
export type { User, Unsubscribe };

----- lib/firestore.ts -----
// lib/firestore.ts
import {
  collection,
  getDocs,
  doc,
  setDoc,
  deleteDoc,
  serverTimestamp,
  updateDoc,
  getDoc,
  type DocumentData,
} from 'firebase/firestore';
import { db } from './firebase';

export type Provider = {
  id: string;
  name: string;
  city?: string;
  country?: string;
  billing?: 'Direct' | 'Reimbursement' | string | null;
  phone?: string;
  email?: string;
  mapsUrl?: string;        // normalized for UI
  placeId?: string;
  lat?: number;
  lng?: number;
  [key: string]: any;      // keep any extra fields (notes, regionTag, etc.)
};

/** Shape we read from Firestore before normalizing */
type ProviderDoc = Omit<Provider, 'id' | 'mapsUrl'> &
  Partial<Pick<Provider, 'id'>> & {
    googleMapsUrl?: string; // many of your docs use this
  };

/** Normalize Firestore doc data -> Provider */
function toProvider(docId: string, raw: ProviderDoc): Provider {
  // prefer embedded id, then fallback to doc id
  const id = raw.id ?? docId;

  // normalize mapsUrl field
  const mapsUrl = raw.googleMapsUrl ?? (raw as any).mapsUrl;

  // Build final Provider (assert name exists; your seed shows it does)
  return {
    ...raw,
    id,
    mapsUrl,
  } as Provider;
}

/** Read-only list used by the app */
export async function getAllProviders(): Promise<Provider[]> {
  const snap = await getDocs(collection(db, 'providers'));
  return snap.docs.map((d) => toProvider(d.id, d.data() as ProviderDoc));
}

/** Favorites live under /users/{uid}/favorites/{providerId} */
export async function getFavoriteIds(uid: string): Promise<string[]> {
  const snap = await getDocs(collection(db, 'users', uid, 'favorites'));
  return snap.docs.map((d) => d.id);
}

export async function toggleFavorite(uid: string, providerId: string, next: boolean) {
  const favRef = doc(db, 'users', uid, 'favorites', providerId);
  if (next) {
    await setDoc(favRef, { createdAt: serverTimestamp() }, { merge: true });
  } else {
    await deleteDoc(favRef);
  }
}

/** Update a provider by doc id (ignore `id` in the patch) */
export async function updateProvider(id: string, patch: Partial<Provider>) {
  const ref = doc(db, 'providers', id);
  const { id: _omit, ...rest } = patch;
  // Firestore’s UpdateData typing is strict; cast is fine for our partials
  await updateDoc(ref, rest as DocumentData);
}

export async function getProvider(id: string): Promise<Provider | null> {
  const ref = doc(db, 'providers', id);
  const snap = await getDoc(ref);
  if (!snap.exists()) return null;
  return toProvider(snap.id, snap.data() as ProviderDoc);
}
----- lib/utils.maps.ts -----
// lib/utils.maps.ts
import { Linking } from 'react-native';

export type LatLng = { lat?: number; lng?: number };

export function buildGoogleMapsUrl(params: {
  name?: string;
  city?: string;
  placeId?: string;
  mapsUrl?: string;
} & LatLng) {
  const { mapsUrl, placeId, name, city, lat, lng } = params;

  if (mapsUrl) return mapsUrl;

  if (placeId) {
    const q = encodeURIComponent(name || '');
    return `https://www.google.com/maps/search/?api=1&query=${q}&query_place_id=${placeId}`;
    // Note: query_place_id ensures Google Maps opens the exact place listing (not a dropped pin) when possible.
  }

  if (typeof lat === 'number' && typeof lng === 'number') {
    return `https://www.google.com/maps/search/?api=1&query=${lat},${lng}`;
  }

  const q = encodeURIComponent([name, city].filter(Boolean).join(' '));
  return `https://www.google.com/maps/search/?api=1&query=${q}`;
}

export async function openInMaps(url: string) {
  try {
    const supported = await Linking.canOpenURL(url);
    if (supported) await Linking.openURL(url);
  } catch {
    // noop
  }
}== FIRESTORE ADMIN (dev tools) ==

----- lib/firestore_admin.ts -----
// lib/firestore_admin.ts
// ⚠️ Dev/Admin only. If this ever ships in prod UI, future-you must buy present-you a coffee. ☕

import {
  getFirestore,
  collection,
  doc,
  setDoc,
  getDoc,
  getDocs,
  deleteDoc,
  updateDoc,
  writeBatch,
  deleteField,
  onSnapshot,
  query,
  where,
} from 'firebase/firestore';
import { app } from './firebase';

// Centralized Firestore for admin tools
export const adminDb = getFirestore(app);

// Re-export common helpers so screens can import from one place
export {
  collection,
  doc,
  setDoc,
  getDoc,
  getDocs,
  deleteDoc,
  updateDoc,
  writeBatch,
  deleteField,
  onSnapshot,
  query,
  where,
};== UI ==

----- styles/shared.ts -----
// styles/shared.ts
import { StyleSheet, Platform, StatusBar } from 'react-native';

export const colors = {
  // Dark theme base
  bg: '#0b1220',        // deep navy (app background)
  card: '#111827',      // near-black slate for cards (a bit higher contrast)
  border: '#1f2937',
  text: '#e5e7eb',
  muted: '#9ca3af',

  // Patriotic accents
  blue:  '#3b82f6',     // links / info
  red:   '#ef4444',     // danger / destructive
  gold:  '#facc15',     // highlights (tab active, star, important actions)

  // Legacy aliases (leave these so older screens don’t explode)
  green: '#22c55e',
  amber: '#f59e0b',     // kept for back-compat; prefer `gold` going forward
  cardBg: '#111827',
  cardBorder: '#1f2937',
};

// Top safe inset (“notch tax” — you pay it whether you like it or not)
const topSafe =
  Platform.OS === 'android'
    ? (StatusBar.currentHeight ?? 0) + 12
    : 16;

export const shared = StyleSheet.create({
  // Layout
  screen: { flex: 1, backgroundColor: colors.bg },
  // Use this on screens wrapped by <Background> so the texture shows through
  screenOnImage: { flex: 1, backgroundColor: 'transparent' },
  safePad: { height: topSafe },
  buffer: { height: 12 },

  // Typography
  title: {
    color: colors.text,
    fontSize: 24,            // bumped from 22 for readability
    fontWeight: '800',
    paddingHorizontal: 16,
    marginBottom: 8,
    // Fun fact: if this breaks, it’s always the font size. Always.
  },
  text: { color: colors.text, paddingHorizontal: 16, fontSize: 16 },     // slight bump
  textMuted: { color: colors.muted, paddingHorizontal: 16, fontSize: 15 },

  // Common rows & pills
  row: { flexDirection: 'row', alignItems: 'center', paddingHorizontal: 16 },
  pill: {
    borderRadius: 999,
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: colors.border,
    // Infinite pill radius = infinite wisdom
  },

  // Cards / lists
  card: {
    borderWidth: 1,
    borderColor: colors.border,
    backgroundColor: colors.card,
    padding: 14,            // tiny bump
    borderRadius: 12,
    marginHorizontal: 16,
    marginTop: 8,           // scientifically fixes 90% of spacing bugs
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
    justifyContent: 'space-between',
  },
  listContent: {
    paddingHorizontal: 12,
    paddingTop: 8,
    paddingBottom: 16,
    gap: 12,
  },

  // Badges (billing)
  badge: {
    borderRadius: 999,
    paddingHorizontal: 10,
    paddingVertical: 4,
    backgroundColor: colors.border,
  },
  badgeText: { color: colors.text, fontWeight: '700', fontSize: 12, letterSpacing: 0.3 },
  badgeDirect: { backgroundColor: '#065f46' }, // green-800 (direct = straight to business)
  badgeReimb:  { backgroundColor: '#7f1d1d' }, // red-900 (reimbursement = red tape 😉)

  // Action row / buttons (call, email, map)
  actionRow: { flexDirection: 'row', gap: 12, marginTop: 12 },
  actionBtn: {
    backgroundColor: colors.bg,
    borderWidth: 1,
    borderColor: colors.border,
    padding: 12,
    borderRadius: 10,
    // Press me, I dare you
  },

  // Empty & helpers
  empty: { color: colors.muted, paddingHorizontal: 16, paddingVertical: 8 }, // “nothing to see here”
});
----- components/Background.tsx -----
// components/Background.tsx
import React from 'react';
import { ImageBackground, StyleSheet } from 'react-native';

type Props = { children: React.ReactNode };

export default function Background({ children }: Props) {
  return (
    <ImageBackground
      source={require('../assets/flag-texture.png')}
      style={styles.bg}
      resizeMode="cover"
    >
      {children}
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  bg: { flex: 1, width: '100%', height: '100%' },
});

----- components/ProviderCard.tsx -----
// components/ProviderCard.tsx
import * as React from 'react';
import { View, Text, StyleSheet, Pressable, Share, Linking, Alert } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { buildGoogleMapsUrl, openInMaps } from '../lib/utils.maps';
import { colors } from '../styles/shared';

export type ProviderCardItem = {
  id: string;
  name: string;
  city?: string;
  country?: string;
  billing?: 'Direct' | 'Reimbursement' | string | null;
  phone?: string;
  mapsUrl?: string;
  placeId?: string;
  lat?: number;
  lng?: number;
};

type Props = {
  item: ProviderCardItem;
  isFavorite?: boolean;
  onToggleFavorite?: (id: string, next: boolean) => void;
};

export default function ProviderCard({ item, isFavorite, onToggleFavorite }: Props) {
  const billing =
    (item.billing ?? '').toString().trim().toLowerCase() === 'direct'
      ? 'Direct'
      : 'Reimbursement';

  const onPressMaps = () => {
    const url = buildGoogleMapsUrl({
      name: item.name,
      city: item.city,
      placeId: item.placeId,
      mapsUrl: item.mapsUrl,
      lat: item.lat,
      lng: item.lng,
    });
    if (!url) {
      Alert.alert('No Location', 'This provider has no map location yet.');
      return;
    }
    openInMaps(url);
  };

  const onPressCall = () => {
    if (!item.phone) {
      Alert.alert('No Phone', 'This provider does not have a phone number yet.');
      return;
    }
    const tel = item.phone.replace(/[^\d+]/g, '');
    Linking.openURL(`tel:${tel}`).catch(() => {});
  };

  const onPressShare = async () => {
    const url = buildGoogleMapsUrl({
      name: item.name,
      city: item.city,
      placeId: item.placeId,
      mapsUrl: item.mapsUrl,
      lat: item.lat,
      lng: item.lng,
    });
    await Share.share({
      title: item.name,
      message: `${item.name}${url ? ` — ${url}` : ''}`,
    }).catch(() => {});
  };

  return (
    <View style={styles.card}>
      <View style={styles.rowBetween}>
        <Text style={styles.name}>{item.name}</Text>

        {/* ⭐ Top-right star toggle */}
        <Pressable
          accessibilityRole="button"
          accessibilityLabel={isFavorite ? 'Remove from favorites' : 'Add to favorites'}
          onPress={() => onToggleFavorite?.(item.id, !isFavorite)}
          hitSlop={10}
          style={{ paddingLeft: 8 }}
        >
          <MaterialIcons
            name={isFavorite ? 'star' : 'star-border'}
            size={24}
            color={isFavorite ? colors.gold : colors.muted}
          />
        </Pressable>
      </View>

      <Text style={styles.sub}>
        {item.city ? `${item.city}, ` : ''}{item.country ?? ''}
      </Text>

      <View style={styles.actions}>
        <IconPill icon="map"    tint={colors.blue}  label="Open in Maps" onPress={onPressMaps} />
        {item.phone ? <IconPill icon="call"   tint={colors.green} label="Call" onPress={onPressCall} /> : null}
        <IconPill icon="share"  tint={colors.gold} label="Share" onPress={onPressShare} />
      </View>

      <View style={styles.badgeRow}>
        <View style={[styles.badge, billing === 'Direct' ? styles.badgeDirect : styles.badgeReimb]}>
          <Text style={styles.badgeText}>{billing}</Text>
        </View>
      </View>
    </View>
  );
}

function IconPill({
  icon,
  label,
  onPress,
  tint,
}: {
  icon: React.ComponentProps<typeof MaterialIcons>['name'];
  label: string;
  onPress: () => void;
  tint: string;
}) {
  return (
    <Pressable
      accessibilityRole="button"
      accessibilityLabel={label}
      onPress={onPress}
      style={({ pressed }) => [styles.pill, pressed && styles.pillPressed]}
    >
      <View style={styles.pillRow}>
        <MaterialIcons name={icon} size={18} color={tint} />
        <Text style={[styles.pillText, { color: tint }]}>{label}</Text>
      </View>
    </Pressable>
  );
}

const styles = StyleSheet.create({
  card: {
    padding: 14,
    borderRadius: 12,
    backgroundColor: colors.card,
    borderWidth: 1,
    borderColor: colors.border,
  },
  rowBetween: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' },
  name: { fontSize: 16, fontWeight: '700', flexShrink: 1, paddingRight: 8, color: colors.text },
  sub: { marginTop: 4, color: colors.muted },

  actions: { flexDirection: 'row', flexWrap: 'wrap', gap: 8, marginTop: 10 },
  pill: {
    backgroundColor: colors.bg,
    borderWidth: 1,
    borderColor: colors.border,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 999,
  },
  pillPressed: { opacity: 0.9 },
  pillRow: { flexDirection: 'row', alignItems: 'center', gap: 6 },
  pillText: { fontWeight: '800' },

  badgeRow: { marginTop: 10, flexDirection: 'row' },
  badge: { paddingHorizontal: 10, paddingVertical: 4, borderRadius: 999 },
  badgeDirect: { backgroundColor: '#065f46' },
  badgeReimb: { backgroundColor: '#7f1d1d' },
  badgeText: { color: '#fff', fontWeight: '700', fontSize: 12, letterSpacing: 0.3 },
});
----- components/Select.tsx -----
// components/Select.tsx
import * as React from 'react';
import {
  View,
  Text,
  Pressable,
  Modal,
  ScrollView,
  StyleSheet,
  Platform,
} from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { colors } from '../styles/shared';

export type Option = { label: string; value: string };

type Props = {
  label: string;                 // visible label on the closed field ("Country", "City", etc.)
  value: string | null;          // current selected value
  options: Option[];             // choices
  onChange: (v: string | null) => void;
  placeholder?: string;          // text when value === null (defaults to label)
  disabled?: boolean;
  icon?: keyof typeof MaterialIcons.glyphMap; // optional leading icon name
};

export default function Select({
  label,
  value,
  options,
  onChange,
  placeholder,
  disabled,
  icon,
}: Props) {
  const [open, setOpen] = React.useState(false);
  const current = options.find(o => o.value === value) || null;

  return (
    <>
      <Pressable
        disabled={disabled}
        onPress={() => setOpen(true)}
        style={({ pressed }) => [
          styles.field,
          disabled && styles.fieldDisabled,
          pressed && styles.fieldPressed,
        ]}
      >
        {icon ? (
          <MaterialIcons name={icon} size={18} color={colors.muted} style={{ marginRight: 6 }} />
        ) : null}
        <Text
          numberOfLines={1}
          style={[styles.fieldText, !current && styles.placeholder]}
        >
          {current ? current.label : (placeholder ?? label)}
        </Text>
        <MaterialIcons
          name={open ? 'expand-less' : 'expand-more'}
          size={20}
          color={colors.muted}
          style={{ marginLeft: 6 }}
        />
      </Pressable>

      <Modal
        visible={open}
        animationType="fade"
        transparent
        onRequestClose={() => setOpen(false)}
      >
        <View style={styles.backdrop} />
        <View style={styles.panel}>
          <View style={styles.panelHeader}>
            <Text style={styles.panelTitle}>{label}</Text>
            <Pressable onPress={() => setOpen(false)} hitSlop={8}>
              <MaterialIcons name="close" size={22} color="#111" />
            </Pressable>
          </View>

          <ScrollView
            style={{ maxHeight: 360 }}
            contentContainerStyle={{ paddingVertical: 4 }}
          >
            {/* “All” / Clear */}
            <Pressable
              onPress={() => { onChange(null); setOpen(false); }}
              style={({ pressed }) => [styles.option, pressed && styles.optionPressed]}
            >
              <Text style={styles.optionText}>All</Text>
            </Pressable>

            {options.map(o => {
              const active = value === o.value;
              return (
                <Pressable
                  key={o.value}
                  onPress={() => { onChange(o.value); setOpen(false); }}
                  style={({ pressed }) => [
                    styles.option,
                    pressed && styles.optionPressed,
                    active && styles.optionActive,
                  ]}
                >
                  <Text style={[styles.optionText, active && styles.optionTextActive]}>
                    {o.label}
                  </Text>
                  {active ? <MaterialIcons name="check" size={18} color="#111" /> : null}
                </Pressable>
              );
            })}
          </ScrollView>
        </View>
      </Modal>
    </>
  );
}

const styles = StyleSheet.create({
  field: {
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: colors.border,
    borderWidth: 1,
    backgroundColor: colors.card,
    borderRadius: 10,
    paddingHorizontal: 10,
    height: 44,
    minWidth: 150,
    flexGrow: 1,
  },
  fieldDisabled: { opacity: 0.5 },
  fieldPressed: { opacity: 0.85 },
  fieldText: { color: colors.text, flex: 1, fontSize: 14, fontWeight: '600' },
  placeholder: { color: colors.muted, fontWeight: Platform.OS === 'ios' ? '600' : '700' },

  backdrop: { ...StyleSheet.absoluteFillObject, backgroundColor: 'rgba(0,0,0,0.3)' },
  panel: {
    position: 'absolute',
    left: 16,
    right: 16,
    top: '20%',
    borderRadius: 12,
    backgroundColor: '#fff', // ← white panel
    padding: 12,
    shadowColor: '#000',
    shadowOpacity: 0.15,
    shadowRadius: 10,
    shadowOffset: { width: 0, height: 6 },
    elevation: 6,
  },
  panelHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingBottom: 6,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: '#e5e7eb',
    marginBottom: 6,
  },
  panelTitle: { fontSize: 16, fontWeight: '800', color: '#111' },

  option: {
    paddingVertical: 12,
    paddingHorizontal: 8,
    backgroundColor: '#fff',
    borderRadius: 8,
    marginVertical: 2,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  optionPressed: { backgroundColor: '#f5f5f5' },
  optionActive: { backgroundColor: '#eef6ff', borderWidth: 1, borderColor: '#cfe1ff' },
  optionText: { color: '#111', fontSize: 14, fontWeight: '700' }, // ← black text
  optionTextActive: { color: '#0b3ea8' },
});
----- components/Icon.tsx -----
// components/Icon.tsx
import * as React from 'react';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';

type Props = React.ComponentProps<typeof MaterialIcons>;
export default function Icon(props: Props) {
  return <MaterialIcons {...props} />;
}== SCREENS (app) ==

----- app/(app)/crisis.tsx -----
// app/(app)/crisis.tsx
import * as React from 'react';
import { View, Text, TouchableOpacity, Linking } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import Background from '../../components/Background';
import { shared, colors } from '../../styles/shared';

export default function Crisis() {
  const call988 = () => Linking.openURL('tel:988').catch(() => {});
  const sms988  = () => Linking.openURL('sms:988').catch(() => {});
  const site988 = () => Linking.openURL('https://988lifeline.org/').catch(() => {});

  return (
    <Background>
      <View style={shared.screenOnImage}>
        <View style={shared.safePad} />
        <Text style={shared.title}>Crisis</Text>
        <Text style={shared.text}>
          If you’re in crisis, you can call or text 988, or visit the 988 Lifeline.
        </Text>

        <View style={shared.actionRow}>
          <TouchableOpacity style={shared.actionBtn} onPress={call988}>
            <MaterialIcons name="call" size={22} color={colors.red} />
          </TouchableOpacity>
          <TouchableOpacity style={shared.actionBtn} onPress={sms988}>
            <MaterialIcons name="sms" size={22} color={colors.gold} />
          </TouchableOpacity>
          <TouchableOpacity style={shared.actionBtn} onPress={site988}>
            <MaterialIcons name="open-in-new" size={22} color={colors.blue} />
          </TouchableOpacity>
        </View>
      </View>
    </Background>
  );
}
----- app/(app)/home.tsx -----
import * as React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import Background from '../../components/Background';
import { shared, colors } from '../../styles/shared';

export default function Home() {
  return (
    <Background>
      <View style={shared.safePad} />
      <View style={styles.container}>
        <Text style={shared.title}>Home</Text>
        <Text style={shared.text}>
          If you can see this, tabs and fonts are loaded. 🎉
        </Text>
        <Text style={shared.text}>
          Next: we’ll wrap other screens and recheck icons in Providers & Favorites.
        </Text>
      </View>
    </Background>
  );
}

const styles = StyleSheet.create({
  container: { paddingHorizontal: 16, paddingTop: 8, flex: 1 },
});

----- app/(app)/resources.tsx -----
// app/(app)/resources.tsx
import * as React from 'react';
import { View, Text, Linking, TouchableOpacity, FlatList, StyleSheet, Alert } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { shared, colors } from '../../styles/shared';
import { VAFMP_LINKS, VAFMP_CONTACT, VAFMP_TOLL_FREE } from '../../lib/resourcesData';
import Background from '../../components/Background';

export default function Resources() {
  const openUrl = (url: string) =>
    Linking.openURL(url).catch(() => Alert.alert('Error', 'Unable to open link.'));
  const sendEmail = () =>
    Linking.openURL(`mailto:${VAFMP_CONTACT.email}`).catch(() =>
      Alert.alert('Error', 'Unable to open mail client.')
    );
  const callNumber = (num: string) =>
    Linking.openURL(`tel:${num.replace(/[^\d+]/g, '')}`).catch(() =>
      Alert.alert('Error', 'Unable to open dialer.')
    );

  return (
    <Background>
      <View style={shared.screenOnImage}>
        <View style={shared.safePad} />
        <Text style={shared.title}>Resources</Text>

        {/* VAFMP Links */}
        <View style={shared.card}>
          <Text style={styles.sectionTitle}>VAFMP</Text>
          {Object.values(VAFMP_LINKS).map((link) => (
            <TouchableOpacity
              key={link.label}
              style={styles.row}
              onPress={() => openUrl(link.url)}
            >
              <MaterialIcons name="open-in-new" size={18} color={colors.gold} style={styles.icon} />
              <Text style={styles.link}>{link.label}</Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* Contact */}
        <View style={shared.card}>
          <Text style={styles.sectionTitle}>Contact</Text>
          <TouchableOpacity style={styles.row} onPress={sendEmail}>
            <MaterialIcons name="email" size={18} color={colors.blue} style={styles.icon} />
            <Text style={styles.link}>Email VAFMP ({VAFMP_CONTACT.email})</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.row} onPress={() => callNumber(VAFMP_CONTACT.mainLine.number)}>
            <MaterialIcons name="call" size={18} color={colors.green} style={styles.icon} />
            <Text style={styles.link}>FMP Main Line: {VAFMP_CONTACT.mainLine.number}</Text>
          </TouchableOpacity>
          <Text style={styles.muted}>
            TTY: {VAFMP_CONTACT.mainLine.tty} • {VAFMP_CONTACT.mainLine.hours}
          </Text>
        </View>

        {/* Toll-Free */}
        <View style={shared.card}>
          <Text style={styles.sectionTitle}>Toll-Free Numbers</Text>
          <FlatList
            data={VAFMP_TOLL_FREE}
            keyExtractor={(item) => item.country}
            renderItem={({ item }) => (
              <TouchableOpacity style={styles.row} onPress={() => callNumber(item.phone)}>
                <MaterialIcons name="phone" size={18} color={colors.green} style={styles.icon} />
                <Text style={styles.link}>{item.country}: {item.phone}</Text>
              </TouchableOpacity>
            )}
            ItemSeparatorComponent={() => <View style={{ height: 6 }} />}
          />
        </View>
      </View>
    </Background>
  );
}

const styles = StyleSheet.create({
  sectionTitle: {
    color: colors.text,
    fontWeight: '800',
    fontSize: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  row: { flexDirection: 'row', alignItems: 'center', marginVertical: 4 },
  icon: { marginRight: 8 },
  link: { color: colors.gold, fontWeight: '700', flexShrink: 1 },
  muted: { color: colors.muted, fontSize: 12, marginTop: 2 },
});
----- app/(app)/favorites.tsx -----
// app/(app)/favorites.tsx
import * as React from 'react';
import { View, Text, FlatList } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { useQuery } from '@tanstack/react-query';

import Background from '../../components/Background';
import { shared } from '../../styles/shared';
import ProviderCard from '../../components/ProviderCard';

import { auth } from '../../lib/authApi';
import { getAllProviders, getFavoriteIds, toggleFavorite } from '../../lib/firestore';

export default function Favorites() {
  const uid = auth.currentUser?.uid ?? null;

  const { data: providers = [] } = useQuery({
    queryKey: ['providers'],
    queryFn: getAllProviders,
  });

  const { data: favIds = [], isLoading } = useQuery({
    queryKey: ['favorites', uid],
    queryFn: () => getFavoriteIds(uid!),
    enabled: !!uid,
  });

  const favorites = providers.filter(p => favIds.includes(p.id));

  return (
    <Background>
      {/* tiny invisible icon so the font is surely “touched” on this screen */}
      <MaterialIcons name="check" size={0.001} color="transparent" />

      <View style={shared.safePad} />
      <Text style={shared.title}>Favorites</Text>

      <FlatList
        contentContainerStyle={shared.listContent}
        data={favorites}
        keyExtractor={(item) => item.id}
        ListEmptyComponent={
          <View style={[shared.card, { alignItems: 'center' }]}>
            <MaterialIcons name="star-border" size={22} />
            <Text style={[shared.text, { marginTop: 6 }]}>
              {isLoading
                ? 'Loading your favorites…'
                : uid
                ? 'Your saved providers will appear here.'
                : 'Sign in to save favorites.'}
            </Text>
          </View>
        }
        renderItem={({ item }) => (
          <ProviderCard
            item={item as any}
            isFavorite={true}
            onToggleFavorite={(id, next) => {
              if (!uid) return;
              toggleFavorite(uid, id, next).catch(() => {});
            }}
          />
        )}
      />
    </Background>
  );
}
----- app/(app)/providers.tsx -----
// app/(app)/providers.tsx
import * as React from 'react';
import { View, Text, FlatList, Alert } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { useQuery, useQueryClient } from '@tanstack/react-query';

import Background from '../../components/Background';
import { shared, colors } from '../../styles/shared';
import Select, { type Option as SelectOption } from '../../components/Select';
import ProviderCard from '../../components/ProviderCard';

import { auth } from '../../lib/authApi';
import {
  getAllProviders,
  getFavoriteIds,
  toggleFavorite,
  type Provider,
} from '../../lib/firestore';

export default function Providers() {
  const qc = useQueryClient();

  // --- Queries ---
  const { data: providers = [], isLoading, isError } = useQuery({
    queryKey: ['providers'],
    queryFn: getAllProviders,
  });

  const uid = auth.currentUser?.uid ?? null;
  const { data: favIds = [] } = useQuery({
    queryKey: ['favorites', uid],
    enabled: !!uid,
    queryFn: () => getFavoriteIds(uid!),
  });

  // --- Filters ---
  const [country, setCountry] = React.useState<string | null>(null);
  const [city, setCity] = React.useState<string | null>(null);
  const [billing, setBilling] = React.useState<string | null>(null);

  const countryOptions: SelectOption[] = React.useMemo(() => {
    const s = new Set<string>();
    providers.forEach(p => p.country && s.add(p.country));
    return Array.from(s).sort().map(v => ({ label: v, value: v }));
  }, [providers]);

  const cityOptions: SelectOption[] = React.useMemo(() => {
    const filtered = country
      ? providers.filter(p => p.country === country)
      : providers;
    const s = new Set<string>();
    filtered.forEach(p => p.city && s.add(p.city));
    return Array.from(s).sort().map(v => ({ label: v, value: v }));
  }, [providers, country]);

  const billingOptions: SelectOption[] = React.useMemo(
    () => [
      { label: 'Direct', value: 'Direct' },
      { label: 'Reimbursement', value: 'Reimbursement' },
    ],
    []
  );

  const filtered = providers.filter(p => {
    if (country && p.country !== country) return false;
    if (city && p.city !== city) return false;
    if (billing && (p.billing ?? p.billingType) !== billing) return false;
    return true;
  });

  // --- Favorite toggle ---
  const onToggleFavorite = async (id: string, next: boolean) => {
    if (!uid) {
      Alert.alert('Sign in required', 'Please sign in to save favorites.');
      return;
    }
    try {
      await toggleFavorite(uid, id, next);
      qc.invalidateQueries({ queryKey: ['favorites', uid] });
    } catch {
      Alert.alert('Error', 'Could not update favorites.');
    }
  };

  return (
    <Background>
      {/* tiny invisible icon so the font is surely “touched” on this screen */}
      <MaterialIcons name="check" size={0.001} color="transparent" />

      <View style={shared.safePad} />
      <Text style={shared.title}>Providers</Text>

      {/* Filters */}
      <View style={[shared.card, { gap: 10 }]}>
        <View style={shared.row}>
          <Select
            label="Country"
            icon="public"
            placeholder="All countries"
            value={country}
            options={countryOptions}
            onChange={(v) => {
              setCountry(v);
              setCity(null); // reset city when country changes
            }}
          />
        </View>

        <View style={shared.row}>
          <Select
            label="City"
            icon="location-city"
            placeholder="All cities"
            value={city}
            disabled={!country}
            options={cityOptions}
            onChange={setCity}
          />
        </View>

        <View style={shared.row}>
          <Select
            label="Billing"
            icon="payments"
            placeholder="All billing"
            value={billing}
            options={billingOptions}
            onChange={setBilling}
          />
        </View>
      </View>

      {/* List */}
      <FlatList
        contentContainerStyle={shared.listContent}
        data={filtered}
        keyExtractor={(item) => item.id}
        ListEmptyComponent={
          <Text style={shared.empty}>
            {isLoading
              ? 'Loading providers…'
              : isError
              ? 'Failed to load providers.'
              : 'No results match your filters.'}
          </Text>
        }
        renderItem={({ item }) => (
          <ProviderCard
            item={item as unknown as Parameters<typeof ProviderCard>[0]['item']}
            isFavorite={favIds.includes(item.id)}
            onToggleFavorite={onToggleFavorite}
          />
        )}
      />
    </Background>
  );
}
----- app/error.tsx -----
import * as React from 'react';
import { View, Text, Pressable } from 'react-native';
import { Link, useLocalSearchParams } from 'expo-router';
import { shared, colors } from '../styles/shared';

export default function ErrorScreen() {
  const params = useLocalSearchParams<{ error?: string }>();
  const msg = Array.isArray(params.error) ? params.error[0] : params.error;

  return (
    <View style={shared.screen}>
      <View style={shared.safePad} />
      <Text style={shared.title}>Something went wrong</Text>
      <Text style={shared.text}>{msg ?? 'An unexpected error occurred.'}</Text>
      <View style={{ flexDirection: 'row', gap: 12, padding: 16 }}>
        <Link href="/(app)/home" asChild>
          <Pressable style={shared.pill}>
            <Text style={{ color: colors.text, fontWeight: '700' }}>Go Home</Text>
          </Pressable>
        </Link>
      </View>
    </View>
  );
}

----- app/(auth)/login.tsx -----
// app/(auth)/login.tsx
import * as React from 'react';
import { View, Text, Pressable, StyleSheet } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import Background from '../../components/Background';
import { shared, colors } from '../../styles/shared';

// ✅ Import ONLY from our wrapper to avoid the firebase/auth type drama
import {
  auth,
  onAuthStateChanged,
  signInAnonymously,
  type User,
} from '../../lib/authApi';

export default function Login() {
  const [user, setUser] = React.useState<User | null>(auth.currentUser);

  React.useEffect(() => {
    const unsub = onAuthStateChanged(auth, setUser);
    return () => unsub();
  }, []);

  const onAnon = () => {
    signInAnonymously(auth).catch(() => {
      // no-op: you can surface a toast/alert if you want
    });
  };

  return (
    <Background>
      <View style={shared.safePad} />
      <View style={styles.container}>
        <Text style={shared.title}>Auth</Text>
        <Text style={shared.text}>
          {user ? `UID: ${user.uid}` : 'Not signed in'}
        </Text>

        <View style={styles.row}>
          <Pressable onPress={onAnon} style={shared.pill} accessibilityRole="button">
            <View style={styles.btnRow}>
              <MaterialIcons name="login" size={16} color={colors.text} />
              <Text style={styles.btnText}>Anon sign-in</Text>
            </View>
          </Pressable>
        </View>
      </View>
    </Background>
  );
}

const styles = StyleSheet.create({
  container: { paddingHorizontal: 16, paddingTop: 8, flex: 1 },
  row: { flexDirection: 'row', gap: 12, padding: 16 },
  btnRow: { flexDirection: 'row', alignItems: 'center', gap: 8 },
  btnText: { color: colors.text, fontWeight: '700' },
});
----- app/(dev)/debugAuth.tsx -----
// app/(dev)/debugAuth.tsx
import * as React from 'react';
import { View, Text, Pressable } from 'react-native';
import { shared } from '../../styles/shared';

// ✅ Import from our wrapper instead of 'firebase/auth'
import {
  auth,
  onAuthStateChanged,
  signInAnonymously,
  signOut,
  type User,
} from '../../lib/authApi';

export default function DebugAuth() {
  const [user, setUser] = React.useState<User | null>(auth.currentUser);

  React.useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, setUser);
    return unsubscribe;
  }, []);

  return (
    <View style={shared.screen}>
      <View style={shared.safePad} />
      <Text style={shared.title}>🔧 Debug Auth</Text>
      <Text style={shared.text}>UID: {user?.uid ?? '—'}</Text>

      <View style={{ flexDirection: 'row', gap: 12, padding: 16 }}>
        <Pressable onPress={() => signInAnonymously(auth)} style={shared.pill}>
          <Text style={{ color: '#fff', fontWeight: '700' }}>Anon sign-in</Text>
        </Pressable>
        <Pressable onPress={() => signOut(auth)} style={shared.pill}>
          <Text style={{ color: '#fff', fontWeight: '700' }}>Sign out</Text>
        </Pressable>
      </View>
    </View>
  );
}
----- app/(dev)/migrateMapsUrl.tsx -----
// app/(dev)/migrateMapsUrl.tsx
import * as React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { colors, shared } from '../../styles/shared';
import {
  adminDb,
  collection,
  doc,
  getDocs,
  updateDoc,
  deleteField,
} from '../../lib/firestore_admin';

// Renames `mapUrl` -> `mapsUrl` and keeps value; removes old field
export default function DevMigrateMapsUrl() {
  const [log, setLog] = React.useState<string[]>([]);
  const append = (l: string) => setLog((p) => [...p, l]);

  const run = async () => {
    try {
      setLog([]);
      const colRef = collection(adminDb, 'providers');
      const snap = await getDocs(colRef);
      append(`Scanning ${snap.size} providers…`);

      let changed = 0;
      for (const d of snap.docs) {
        const data = d.data() as any;
        if (data && data.mapUrl && !data.mapsUrl) {
          await updateDoc(doc(adminDb, 'providers', d.id), {
            mapsUrl: data.mapUrl,
            mapUrl: deleteField(),
          });
          changed++;
          append(`✓ ${d.id}: mapUrl → mapsUrl`);
        }
      }

      append(`✅ Migration complete. Updated ${changed} docs.`);
      Alert.alert('Migrate mapUrl → mapsUrl', `Updated ${changed} documents.`);
    } catch (e: any) {
      console.error(e);
      Alert.alert('Migration Error', String(e?.message || e));
    }
  };

  return (
    <ScrollView style={shared.screen} contentContainerStyle={{ paddingBottom: 24 }}>
      <View style={shared.safePad} />
      <Text style={shared.title}>Dev: mapUrl → mapsUrl</Text>

      <View style={shared.card}>
        <Text style={shared.text}>Renames legacy <Text style={{fontWeight: '800'}}>mapUrl</Text> to <Text style={{fontWeight: '800'}}>mapsUrl</Text>.</Text>
        <View style={{ height: 12 }} />
        <TouchableOpacity style={styles.btn} onPress={run}>
          <MaterialIcons name="sync" size={18} color={colors.text} />
          <Text style={styles.btnText}>Run Migration</Text>
        </TouchableOpacity>
      </View>

      {log.length > 0 && (
        <View style={shared.card}>
          <Text style={[shared.text, { marginBottom: 6 }]}>Log</Text>
          {log.map((l, i) => (
            <Text key={i} style={shared.textMuted}>• {l}</Text>
          ))}
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  btn: {
    flexDirection: 'row',
    gap: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: colors.border,
    backgroundColor: colors.card,
    padding: 10,
    borderRadius: 10,
    alignSelf: 'flex-start',
  },
  btnText: { color: colors.text, fontWeight: '700' },
});
----- app/(dev)/seedProviders.tsx -----
// app/(dev)/seedProviders.tsx
import * as React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { colors, shared } from '../../styles/shared';
import {
  adminDb,
  collection,
  doc,
  setDoc,
  deleteDoc,
  getDocs,
} from '../../lib/firestore_admin';

// Prefer a single seed file; adjust path/name as needed
import seed from '../../seed/providers.seed.json';

// shape we expect in Firestore
type Provider = {
  id?: string;
  name: string;
  country?: string | null;
  city?: string | null;
  billing?: 'Direct' | 'Reimbursement' | string | null;
  phone?: string | null;
  email?: string | null;
  mapsUrl?: string | null;
  placeId?: string | null;
  lat?: number | null;
  lng?: number | null;
};

export default function DevSeedProviders() {
  const [log, setLog] = React.useState<string[]>([]);

  const append = (line: string) => setLog((l) => [...l, line]);

  const wipeAndSeed = async () => {
    try {
      setLog([]);
      append('Fetching current providers…');
      const colRef = collection(adminDb, 'providers');
      const snap = await getDocs(colRef);

      append(`Deleting ${snap.size} existing docs…`);
      // small sets are fine to delete sequentially; batch if you grow big
      for (const d of snap.docs) {
        await deleteDoc(doc(adminDb, 'providers', d.id));
      }

      append(`Seeding ${seed.length} providers…`);
      for (const raw of seed as Provider[]) {
        // give each doc an id if not present
        const ref = doc(colRef);
        const { id, ...rest } = raw || {};
        const data: Provider = {
          ...rest,
          // normalize billing
          billing: (rest.billing ?? '')
            .toString()
            .toLowerCase() === 'direct'
            ? 'Direct'
            : 'Reimbursement',
        };
        await setDoc(id ? doc(adminDb, 'providers', id) : ref, data);
      }

      append('✅ Done seeding.');
      Alert.alert('Seed Providers', 'Completed without tears.');
    } catch (e: any) {
      console.error(e);
      Alert.alert('Seed Providers', String(e?.message || e));
    }
  };

  return (
    <ScrollView style={shared.screen} contentContainerStyle={{ paddingBottom: 24 }}>
      <View style={shared.safePad} />
      <Text style={shared.title}>Dev: Seed Providers</Text>

      <View style={shared.card}>
        <Text style={shared.text}>Replaces all providers with the seed file.</Text>
        <View style={{ height: 12 }} />
        <TouchableOpacity style={styles.btn} onPress={wipeAndSeed}>
          <MaterialIcons name="download" size={18} color={colors.text} />
          <Text style={styles.btnText}>Wipe & Seed</Text>
        </TouchableOpacity>
      </View>

      {log.length > 0 && (
        <View style={shared.card}>
          <Text style={[shared.text, { marginBottom: 6 }]}>Log</Text>
          {log.map((l, i) => (
            <Text key={i} style={shared.textMuted}>• {l}</Text>
          ))}
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  btn: {
    flexDirection: 'row',
    gap: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: colors.border,
    backgroundColor: colors.card,
    padding: 10,
    borderRadius: 10,
    alignSelf: 'flex-start',
  },
  btnText: { color: colors.text, fontWeight: '700' },
});
----- app/(dev)/auditMapsUrl.tsx -----
// app/(dev)/auditMapsUrl.tsx
import * as React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { colors, shared } from '../../styles/shared';
import { adminDb, collection, getDocs } from '../../lib/firestore_admin';

type Finding = { id: string; name?: string | null; issue: string };

export default function DevAuditMapsUrl() {
  const [findings, setFindings] = React.useState<Finding[]>([]);

  const run = async () => {
    try {
      setFindings([]);
      const snap = await getDocs(collection(adminDb, 'providers'));
      const rows: Finding[] = [];
      snap.forEach((d) => {
        const data = d.data() as any;
        const missingMaps = !data.mapsUrl && !data.placeId && !(data.lat && data.lng);
        if (missingMaps) {
          rows.push({ id: d.id, name: data.name, issue: 'No mapsUrl/placeId/coords' });
        }
      });
      setFindings(rows);
      Alert.alert('Audit complete', `${rows.length} item(s) flagged.`);
    } catch (e: any) {
      console.error(e);
      Alert.alert('Audit Error', String(e?.message || e));
    }
  };

  return (
    <ScrollView style={shared.screen} contentContainerStyle={{ paddingBottom: 24 }}>
      <View style={shared.safePad} />
      <Text style={shared.title}>Dev: Audit map links</Text>

      <View style={shared.card}>
        <Text style={shared.text}>Lists providers missing any usable maps targeting info.</Text>
        <View style={{ height: 12 }} />
        <TouchableOpacity style={styles.btn} onPress={run}>
          <MaterialIcons name="search" size={18} color={colors.text} />
          <Text style={styles.btnText}>Run Audit</Text>
        </TouchableOpacity>
      </View>

      {findings.length > 0 && (
        <View style={shared.card}>
          <Text style={[shared.text, { marginBottom: 6 }]}>Findings</Text>
          {findings.map((f) => (
            <Text key={f.id} style={shared.textMuted}>
              • {f.name || '(no name)'} — {f.issue} [{f.id}]
            </Text>
          ))}
        </View>
      )}

      {findings.length === 0 && (
        <Text style={shared.textMuted}>No findings yet. (Probably because you didn’t press the button. 😉)</Text>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  btn: {
    flexDirection: 'row',
    gap: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: colors.border,
    backgroundColor: colors.card,
    padding: 10,
    borderRadius: 10,
    alignSelf: 'flex-start',
  },
  btnText: { color: colors.text, fontWeight: '700' },
});
----- app/(dev)/normalizeProviders.tsx -----
// app/(dev)/normalizeProviders.tsx
import * as React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView } from 'react-native';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { colors, shared } from '../../styles/shared';
import {
  adminDb,
  collection,
  getDocs,
  doc,
  writeBatch,
  deleteField,
  updateDoc,
} from '../../lib/firestore_admin';

// Normalizes billing (Direct/Reimbursement), drops legacy fields
export default function DevNormalizeProviders() {
  const [log, setLog] = React.useState<string[]>([]);
  const append = (s: string) => setLog((xs) => [...xs, s]);

  const run = async () => {
    try {
      setLog([]);
      const snap = await getDocs(collection(adminDb, 'providers'));
      append(`Scanning ${snap.size} providers…`);

      const batch = writeBatch(adminDb);
      let touched = 0;

      snap.forEach((d) => {
        const data = d.data() as any;
        let nextBilling: 'Direct' | 'Reimbursement' | null = null;

        if (typeof data.billing === 'string') {
          const b = data.billing.toLowerCase();
          if (b === 'direct') nextBilling = 'Direct';
          else if (b === 'reimbursement') nextBilling = 'Reimbursement';
        }

        const payload: any = {};
        if (nextBilling && data.billing !== nextBilling) {
          payload.billing = nextBilling;
        }
        if ('billingType' in data) {
          payload.billingType = deleteField();
        }

        if (Object.keys(payload).length > 0) {
          batch.update(doc(adminDb, 'providers', d.id), payload);
          touched++;
        }
      });

      if (touched > 0) {
        await batch.commit();
      }
      append(`✅ Normalized ${touched} document(s).`);
      Alert.alert('Normalize Providers', `Updated ${touched} document(s).`);
    } catch (e: any) {
      console.error(e);
      Alert.alert('Normalize Error', String(e?.message || e));
    }
  };

  return (
    <ScrollView style={shared.screen} contentContainerStyle={{ paddingBottom: 24 }}>
      <View style={shared.safePad} />
      <Text style={shared.title}>Dev: Normalize Providers</Text>

      <View style={shared.card}>
        <Text style={shared.text}>
          Enforces <Text style={{ fontWeight: '800' }}>billing</Text> to “Direct” or “Reimbursement”, removes legacy <Text style={{ fontWeight: '800' }}>billingType</Text>.
        </Text>
        <View style={{ height: 12 }} />
        <TouchableOpacity style={styles.btn} onPress={run}>
          <MaterialIcons name="auto-fix-high" size={18} color={colors.text} />
          <Text style={styles.btnText}>Normalize</Text>
        </TouchableOpacity>
      </View>

      {log.length > 0 && (
        <View style={shared.card}>
          <Text style={[shared.text, { marginBottom: 6 }]}>Log</Text>
          {log.map((l, i) => (
            <Text key={i} style={shared.textMuted}>• {l}</Text>
          ))}
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  btn: {
    flexDirection: 'row',
    gap: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: colors.border,
    backgroundColor: colors.card,
    padding: 10,
    borderRadius: 10,
    alignSelf: 'flex-start',
  },
  btnText: { color: colors.text, fontWeight: '700' },
});